diff --git a/dist/index.mjs b/dist/index.mjs
index 62bf9a976fa92b3342ffee83491f717724a6ce92..bd971e95ba9b6c55da7168c4126fa7861a3f3817 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -16,6 +16,7 @@ async function Nitro(options = {}) {
   let listener;
   let server;
   let nitro;
+  const outDir = `${process.cwd()}/dist`;
   async function reloadNitro() {
     if (nitro) {
       consola.info("Restarting dev server...");
@@ -91,22 +92,30 @@ ${diff.map((entry) => `  ${entry.toString()}`).join("\n")}`);
         config.server.watch.ignored ??= [];
         config.server.watch.ignored = isArray(config.server.watch.ignored) ? [...config.server.watch.ignored, /\.nitro\/types\/tsconfig.json/] : [config.server.watch.ignored, /\.nitro\/types\/tsconfig.json/].filter(Boolean);
         config.build ??= {};
-        config.build.outDir ??= whenever(options.clientDist, path.resolve) || `${process.cwd()}/dist`;
+        config.build.outDir = outDir
       },
-      async configResolved(config) {
-        nitro = process.env.NODE_ENV === "production" ? await createNitro$1(path.resolve(config.build.outDir)) : await reloadNitro();
+      async configResolved(configResolved) {
+        if (process.env.NODE_ENV === 'devlopment')
+          reloadNitro()
       },
       async configureServer(server2) {
         server2.middlewares.use(async (req, res, next) => filter(req.originalUrl || req.url || "") ? listener?.(req, res) : next());
       },
-      async buildEnd() {
+      async closeBundle() {
+        consola.info("Building Nitro...");
+        consola.log(`Output directory: ${outDir}`);
+        consola.log(`Source directory: ${srcDir}`);
+        consola.log(`Relative path: ${path.relative(srcDir, outDir)}`);
+        consola.log(await Array.fromAsync(fs.glob(`${outDir}/**`)));
+
+        nitro = await createNitro$1(outDir);
         await prepare(nitro);
         await copyPublicAssets(nitro);
         await prerender(nitro);
         await build(nitro);
         await nitro.close();
-        await fs.mkdir(".output/server/node_modules/vite/misc", { recursive: true });
-        await fs.writeFile(".output/server/node_modules/vite/misc/true.js", "export default true");
+
+        consola.log(await Array.fromAsync(fs.glob('.vercel/**')))
       },
       resolveId(source) {
         if (source === "virtual:$fetch")
